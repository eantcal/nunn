-------------------------------------------------------------------------------
nunn - https://sourceforge.net/projects/nunn/
(c) Antonino Calderone <acaldmail@gmail.com> - 2015
-------------------------------------------------------------------------------

This is an implementation of a Artificial Neural Network Library which 
learns by example.
You give the algorithm examples of what you want the network to do and it 
changes the network's weights. When training is finished, it will give you 
the required output for a particular input.

-------------------------------------------------------------------------------
Features
-------------------------------------------------------------------------------

- Free open source neural network library
- Implements multilayer artificial neural networks (C++11)
- Supports for fully connected networks
- Easy to use and understand
- Versatile
- Easy to save and load entire ANNs



-------------------------------------------------------------------------------
MNIST Test Demo (mnist_test)
-------------------------------------------------------------------------------

This demo trains and tests nunn neural network against the MNIST.
The test is performed by using the MNIST data set, which contains 60K + 10K 
scanned images of handwritten digits with their correct classifications
The images are greyscale and 28 by 28 pixels in size.
The first part of 60,000 images were used as training data.
The second part of 10,000 images were used as test data.
The test data was taken from a different set of people than the original training data.
The training input is treated as a 28×28=784-dimensional vector.
Each entry in the vector represents the grey value for a single pixel in the image.
The corresponding desired output is a 10-dimensional vector.

You may obtain info about MNIST at link http://yann.lecun.com/exdb/mnist/

-------------------------------------------------------------------------------
mnist_test - Usage:

mnist_test
        [--version|-v]
        [--help|-h]
        [--training_files_path|-p <path>]
        [--save|-s <net_description_file_name>]
        [--load|-l <net_description_file_name>]
        [--skip_training|-n]
        [--learning_rate|-r <rate>]
        [--epoch_cnt|-e <count>]
        [[--hidden_layer|-hl <size> [--hidden_layer|--hl <size] ... ]

Where:
--version or -v
        shows the program version
--help or -h
        generates just this 'Usage' text
--training_files_path or -p
        specify training/test files set path
--save or -s
        save net data to file
--load or -l
        load net data from file
--skip_training or -n
        skip net training
--learning_rate or -r
        set learning rate (default 0.10)
--epoch_cnt or -e
        set epoch count (defualt 10)
--hidden_layer or -hl 
        set hidden layer size (n. of neurons, default 100)

-------------------------------------------------------------------------------
Example:

# mnist_test -e 60 -r 0.40 -hl 135 -s nn_135hl_040lr.net

-------------------------------------------------------------------------------
Output:

NN hidden neurons L1       : 135
Net Learning rate          : 0.4
Training labels : train-labels.idx1-ubyte
Training images : train-images.idx3-ubyte
Test labels file: t10k-labels.idx1-ubyte
Test images file: t10k-images.idx3-ubyte
Learning epoch 1 of 60
Completed 100%
Error rate   : 6.65%
Success rate : 93.35%
BER          : 6.65%
Epoch BER    : 1
Learning epoch 2 of 60
Completed 22.8%

...

BER          : 2.31%

-------------------------------------------------------------------------------
Handwritten Digit OCR Demo (ocr_test)
-------------------------------------------------------------------------------
This is an interactive demo which uses MNIST trained neural network created 
by using nunn library.
nunn status files (.net) have been created by mnist_test application


-------------------------------------------------------------------------------
TicTacToe Demo (tictactoe)
-------------------------------------------------------------------------------

Basic TicTacToe game which uses neural networks. 


TicTacToe - Usage:

>tictactoe.exe -l tictactoe.net -h
Usage:
tictactoe.exe
        [--version|-v]
        [--help|-h]
        [--save|-s <net_description_file_name>]
        [--load|-l <net_description_file_name>]
        [--skip_training|-n]
        [--learning_rate|-r <rate>]
        [--epoch_cnt|-e <count>]
        [--stop_on_err_tr|-x <error rate>]
        [[--hidden_layer|-hl <size> [--hidden_layer|--hl <size] ... ]

Where:
--version or -v
        shows the program version
--help or -h
        generates just this 'Usage' text
--save or -s
        save net data to file
--load or -l
        load net data from file
--skip_training or -n
        skip net training
--learning_rate or -r
        set learning rate (default 0.3)
--epoch_cnt or -e
        set epoch count (default 100000)
--stop_on_err_tr or -x
        set error rate threshold (default 0.1)
--hidden_layer or -hl
        set hidden layer size (n. of neurons, default 30 )


-------------------------------------------------------------------------------
Example: Running the program which loads a trained NN from the file 
         tictactoe.net skypping training stage (-n)

>tictactoe.exe -l tictactoe.net -n
Inputs                     : 10
NN hidden neurons L1       : 50
NN hidden neurons L2       : 30
NN hidden neurons L3       : 20
Outputs                    : 9
Net Learning rate  ( LR )  : 0.3
Net Momentum       ( M )   : 0.5
MSE Threshold      ( T )   : 0.1
Neuron 2 -> 0.1%
Neuron 8 -> 0.1%
Neuron 5 -> 99.9%
-------------
|   |   |   |
|   |   |   |
|---|---|---|
|   |   |   |
|   | O |   |
|---|---|---|
|   |   |   |
|   |   |   |
-------------

-------------
|   |   |   |
| 1 | 2 | 3 |
|---|---|---|
|   |   |   |
| 4 | O | 6 |
|---|---|---|
|   |   |   |
| 7 | 8 | 9 |
-------------

Please, give me a number within the range [1..9]: 1

...


-------------------------------------------------------------------------------
TicTacToe Demo for Windows (winttt)
-------------------------------------------------------------------------------

Interactive TicTacToe game for Windows which uses trained neural networks 
created by using tictactoe program
